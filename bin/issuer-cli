#!/usr/bin/env node

const yargs = require('yargs/yargs');
const {hideBin} = require('yargs/helpers');
const {defaultClient} = require('../src/whitelist');
const {didToAddress} = require('../src/utils');
const {
	fetchApprovedDIDs,
	isWhitelistedDid,
	getInfoByEmail,
	checkWhitelistedDids
} = require('../src/lib');

process.on('SIGTERM', () => {
	process.exit(0);
});
process.on('SIGINT', () => {
	process.exit(0);
});

// eslint-disable-next-line no-unused-expressions
yargs(hideBin(process.argv))
	.option('max-updated-ts', {
		describe: 'max-updated-ts',
		type: 'number',
		default: undefined
	})
	.option('kycc-page-size', {
		describe: 'kycc-page-size',
		type: 'number',
		default: 100
	})
	.command({
		command: 'get-whitelisted-did [did]',
		aliases: ['is'],
		desc: 'Checks if did is whitelisted',
		handler: argv => getWhitelistedDidCommand(argv).then()
	})
	.command({
		command: 'get-approved',
		aliases: ['a'],
		desc: 'print a list of all dids that were approved',
		handler: getApprovedDidsCommand
	})
	.command({
		command: 'get-whitelisted',
		aliases: ['wl'],
		desc: "print a list of all did's that were whitelisted",
		handler: getWhitelistedDidsCommand
	})
	.command({
		command: 'get-not-whitelisted',
		aliases: ['nwl'],
		desc: "print a list of all did's that were approved but not whitelisted",
		handler: getNotWhitelistedDidsCommand
	})
	.command({
		command: 'fix-not-whitelisted',
		aliases: ['fnwl'],
		desc: "whitelist all did's that were approved but not whitelisted",
		handler: fixNotWhitelistedDidsCommand
	})
	.command({
		command: 'whitelist-did [did]',
		desc: 'whitelist a given did',
		handler: whitelistDID
	})
	.command({
		command: 'remove-whitelisted-did [did]',
		desc: 'remove a given did from whitelist',
		handler: removeWhitelistedDID
	})
	.command({
		command: 'get-info-by-email [email]',
		desc: 'get info by email',
		handler: getInfoByEmailCommand
	})
	.onFinishCommand(() => {
		defaultClient.destroy();
		process.exit(0);
	})
	.demandCommand()
	.help()
	.strict().argv;

async function whitelistDID(argv) {
	const address = await didToAddress(argv.did);
	await defaultClient.addWhitelisted(address);
}

async function removeWhitelistedDID(argv) {
	const address = await didToAddress(argv.did);
	await defaultClient.removeWhitelisted(address);
}

async function getInfoByEmailCommand(argv) {
	const {applications, user, whitelisted} = await getInfoByEmail(argv.email, argv.kyccPageSize);

	if (!user) {
		console.log('info not found');
		return;
	}

	if (!applications.length && user) {
		console.log(
			'no applications for',
			argv.email,
			user.did,
			whitelisted ? 'whitelisted' : 'not whitelisted'
		);
	}

	const table = [];

	applications.forEach(a => {
		table.push({
			'Application ID': a.id,
			Status: a.currentStatus,
			DID: user.did,
			Whitelisted: whitelisted
		});
	});

	console.table(table, ['Application ID', 'Status', 'DID', 'Whitelisted']);
}

async function getWhitelistedDidCommand(argv) {
	const whitelisted = await isWhitelistedDid(argv.did);
	console.log(`${argv.did} ${whitelisted ? 'whitelisted' : 'not whitelisted'}`);
	return true;
}

async function getApprovedDidsCommand(argv) {
	const dids = await fetchApprovedDIDs(argv.kyccPageSize, argv.maxUpdatedTs);
	const whitelist = await checkWhitelistedDids(dids);
	if (!whitelist.length) {
		console.log('No DIDs');
		return;
	}
	const toPrint = whitelist.map(w => ({DID: w.did, Whitelisted: w.whitelisted}));
	console.table(toPrint, ['DID', 'Whitelisted']);
}

async function getWhitelistedDidsCommand(argv) {
	const dids = await fetchApprovedDIDs(argv.kyccPageSize, argv.maxUpdatedTs);
	const whitelist = await checkWhitelistedDids(dids);
	const notWhitelisted = whitelist.filter(w => !!w.whitelisted).map(w => w.did);
	if (!notWhitelisted.length) {
		console.log('No whitelisted DIDs');
		return;
	}
	console.log(notWhitelisted.join('\n'));
}

async function getNotWhitelistedDidsCommand(argv) {
	const dids = await fetchApprovedDIDs(argv.kyccPageSize, argv.maxUpdatedTs);
	const whitelist = await checkWhitelistedDids(dids);
	const notWhitelisted = whitelist.filter(w => !w.whitelisted).map(w => w.did);
	if (!notWhitelisted.length) {
		console.log('All DIDs are whitelisted');
		return;
	}
	console.log(notWhitelisted.join('\n'));
}

async function fixNotWhitelistedDidsCommand(argv) {
	const dids = await fetchApprovedDIDs(argv.kyccPageSize, argv.maxUpdatedTs);
	const whitelist = await checkWhitelistedDids(dids);
	const notWhitelisted = whitelist.filter(w => !w.whitelisted).map(w => w.did);
	if (!notWhitelisted.length) {
		console.log('Nothing to fix');
		return;
	}
	let whitelisted = 0;
	console.log('whitelisting', notWhitelisted.length, 'DIDs');
	await Promise.all(
		notWhitelisted.map(async did => {
			try {
				const address = await didToAddress(did);
				await defaultClient.addWhitelisted(address);
				console.log(++whitelisted, '/', notWhitelisted.length, did);
			} catch (error) {
				console.error(++whitelisted, '/', notWhitelisted.length, did, 'failed');
				console.error(error.message);
			}
		})
	);
}
