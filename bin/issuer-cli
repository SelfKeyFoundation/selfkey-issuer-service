#!/usr/bin/env node

const yargs = require('yargs/yargs');
const debug = require('debug')('issuer:cli');
const {hideBin} = require('yargs/helpers');
const {defaultClient} = require('../src/whitelist');

const {fetchApprovedDIDs, getInfoByEmail, checkWhitelistedDids} = require('../src/lib');

process.on('SIGTERM', () => {
	process.exit(0);
});
process.on('SIGINT', () => {
	process.exit(0);
});

// eslint-disable-next-line no-unused-expressions
yargs(hideBin(process.argv))
	.option('max-updated-ts', {
		describe: 'max-updated-ts',
		type: 'number',
		default: undefined
	})
	.option('kycc-page-size', {
		describe: 'kycc-page-size',
		type: 'number',
		default: 100
	})

	.command({
		command: 'get-approved',
		aliases: ['a'],
		desc: 'print a list of all dids that were approved',
		handler: getApprovedDidsCommand
	})

	.command({
		command: 'get-info-by-email [email]',
		desc: 'get info by email',
		handler: getInfoByEmailCommand
	})
	.onFinishCommand(() => {
		defaultClient.destroy();
		process.exit(0);
	})
	.demandCommand()
	.help()
	.strict().argv;

async function getInfoByEmailCommand(argv) {
	debug('collecting info for email', argv.email);
	const {applications, user, whitelisted} = await getInfoByEmail(argv.email, argv.kyccPageSize);

	if (!user) {
		console.log('info not found');
		return;
	}

	if (!applications.length && user) {
		console.log(
			'no applications for',
			argv.email,
			user.did,
			whitelisted ? 'whitelisted' : 'not whitelisted'
		);
	}

	const table = [];

	applications.forEach(a => {
		table.push({
			'Application ID': a.id,
			Status: a.currentStatus,
			DID: user.did,
			Whitelisted: whitelisted
		});
	});

	console.table(table, ['Application ID', 'Status', 'DID', 'Whitelisted']);
}

async function getApprovedDidsCommand(argv) {
	debug('collecting approved dids');
	const dids = await fetchApprovedDIDs(argv.kyccPageSize, argv.maxUpdatedTs);
	const whitelist = await checkWhitelistedDids(dids);
	if (!whitelist.length) {
		console.log('No DIDs');
		return;
	}
	const toPrint = whitelist.map(w => ({DID: w.did, Whitelisted: w.whitelisted}));
	console.table(toPrint, ['DID', 'Whitelisted']);
}
