#!/usr/bin/env node

const config = require('../src/config');
const yargs = require('yargs/yargs');
const {defaultClient} = require('../src/whitelist');
const kyccClient = require('../src/kycc-client');
const {didToAddress} = require('../src/utils');
const {hideBin} = require('yargs/helpers');

process.on('SIGTERM', () => {
	process.exit(0);
});
process.on('SIGINT', () => {
	process.exit(0);
});

// eslint-disable-next-line no-unused-expressions
yargs(hideBin(process.argv))
	.command({
		command: 'get-whitelisted-did [did]',
		aliases: ['is'],
		desc: 'Checks if did is whitelisted',
		handler: argv => getWhitelistedDidCommand(argv).then()
	})
	.command({
		command: 'get-approved',
		aliases: ['a'],
		desc: 'print a list of all dids that were approved',
		handler: getApprovedDidsCommand
	})
	.command({
		command: 'get-whitelisted',
		aliases: ['wl'],
		desc: "print a list of all did's that were whitelisted",
		handler: getWhitelistedDidsCommand
	})
	.command({
		command: 'get-not-whitelisted',
		aliases: ['nwl'],
		desc: "print a list of all did's that were approved but not whitelisted",
		handler: getNotWhitelistedDidsCommand
	})
	.command({
		command: 'fix-not-whitelisted',
		aliases: ['fnwl'],
		desc: "whitelist all did's that were approved but not whitelisted",
		handler: fixNotWhitelistedDidsCommand
	})
	.command({
		command: 'get-info-by-email [email]',
		desc: 'get info by email',
		handler: getInfoByEmailCommand
	})
	.onFinishCommand(() => {
		defaultClient.destroy();
		process.exit(0);
	})
	.demandCommand()
	.help()
	.strict().argv;

async function getInfoByEmailCommand(argv) {
	const {applications, user, whitelisted} = await getInfoByEmail(argv.email);

	if (!applications.length && user) {
		console.log(
			'no applications for',
			argv.email,
			user.did,
			whitelisted ? 'whitelisted' : 'not whitelisted'
		);
	}

	const table = [];

	applications.forEach(a => {
		table.push({
			'Application ID': a.id,
			Status: a.currentStatus,
			DID: user.did,
			Whitelisted: whitelisted
		});
	});

	console.table(table, ['Application ID', 'Status', 'DID', 'Whitelisted']);
}

async function getWhitelistedDidCommand(argv) {
	const whitelisted = await isWhitelistedDid(argv.did);
	console.log(`${argv.did} ${whitelisted ? 'whitelisted' : 'not whitelisted'}`);
	return true;
}

async function getApprovedDidsCommand(argv) {
	const dids = await fetchApprovedDIDs();
	const whitelist = await checkWhitelistedDids(dids);
	if (!whitelist.length) {
		console.log('No DIDs');
		return;
	}
	const toPrint = whitelist.map(w => ({DID: w.did, Whitelisted: w.whitelisted}));
	console.table(toPrint, ['DID', 'Whitelisted']);
}

async function getWhitelistedDidsCommand(argv) {
	const dids = await fetchApprovedDIDs();
	const whitelist = await checkWhitelistedDids(dids);
	const notWhitelisted = whitelist.filter(w => !!w.whitelisted).map(w => w.did);
	if (!notWhitelisted.length) {
		console.log('No whitelisted DIDs');
		return;
	}
	console.log(notWhitelisted.join('\n'));
}

async function getNotWhitelistedDidsCommand(argv) {
	const dids = await fetchApprovedDIDs();
	const whitelist = await checkWhitelistedDids(dids);
	const notWhitelisted = whitelist.filter(w => !w.whitelisted).map(w => w.did);
	if (!notWhitelisted.length) {
		console.log('All DIDs are whitelisted');
		return;
	}
	console.log(notWhitelisted.join('\n'));
}

async function fixNotWhitelistedDidsCommand(arv) {
	const dids = await fetchApprovedDIDs();
	const whitelist = await checkWhitelistedDids(dids);
	const notWhitelisted = whitelist.filter(w => !w.whitelisted).map(w => w.did);
	if (!notWhitelisted.length) {
		console.log('Nothing to fix');
		return;
	}
	await Promise.all(
		notWhitelisted.map(async did => {
			try {
				const address = await didToAddress(did);
				console.log('whitelisting', did, address);
				await defaultClient.addWhitelisted(address);
				console.log('Whitelisted', did, address);
			} catch (error) {
				console.error(error.message);
				console.error('Failed to whitelist', did);
			}
		})
	);
}

async function fetchApprovedDIDs() {
	let approvedApplications = await kyccClient.applications.list(
		{
			template_id: config.kyccTemplate,
			current_statuses: [kyccClient.statuses.APPROVED],
			limit: 1000
		},
		['owners', 'currentStatus']
	);

	if (approvedApplications.length === 1000) {
		let hasMore = true;
		let page = 1;
		while (hasMore) {
			let apps = await kyccClient.applications.list(
				{
					template_id: config.kyccTemplate,
					current_statuses: [kyccClient.statuses.APPROVED],
					limit: 1000,
					skip: page * 1000
				},
				['owners', 'currentStatus']
			);
			approvedApplications = approvedApplications.concat(apps);
			if (apps.length < 1000) {
				hasMore = false;
			}
		}
	}

	const approvedApplicationUserIds = approvedApplications
		.filter(a => a.owners && a.owners.length)
		.map(a => a.owners[0]._id);

	const users = await Promise.all(
		approvedApplicationUserIds.map(async id => kyccClient.users.get(id))
	);
	return users.map(u => u.did).filter(u => !!u);
}

async function fetchAllApplications() {
	let applications = await kyccClient.applications.list(
		{
			template_id: config.kyccTemplate,
			limit: 1000
		},
		['id', 'owners', 'currentStatus']
	);

	if (applications.length === 1000) {
		let hasMore = true;
		let page = 1;
		while (hasMore) {
			let apps = await kyccClient.applications.list(
				{
					template_id: config.kyccTemplate,
					limit: 1000,
					skip: page * 1000
				},
				['owners', 'currentStatus']
			);
			applications = applications.concat(apps);
			if (apps.length < 1000) {
				hasMore = false;
			}
		}
	}
	return applications;
}

async function isWhitelistedDid(did) {
	const address = await didToAddress(did);
	return defaultClient.isWhitelisted(address);
}

async function getInfoByEmail(email) {
	let applications = await fetchAllApplications();
	let user = null;
	let whitelisted = false;
	applications = applications.filter(
		a => a.owners[0] && a.owners[0].email.toLowerCase() === email.toLowerCase()
	);
	if (!applications || !applications.length) {
		user = await getUserByEmail(email);
	} else {
		user = await kyccClient.users.get(applications[0].owners[0]._id);
	}
	if (user && user.did) {
		whitelisted = await isWhitelistedDid(user.did);
	}
	return {applications, user, whitelisted};
}

async function getUserByEmail(email) {
	let hasMore = true;
	let page = 0;
	while (hasMore) {
		const users = await kyccClient.users.list({skip: page * 100, limit: 100}, ['id', 'email']);
		const usr = users.find(u => u.email.toLowerCase() === email.toLowerCase());
		if (usr) {
			return kyccClient.users.get(usr.id);
		}
		if (!users.length) {
			hasMore = false;
		}
		page++;
	}
	return null;
}

async function checkWhitelistedDids(dids) {
	return Promise.all(dids.map(async did => ({did, whitelisted: await isWhitelistedDid(did)})));
}
